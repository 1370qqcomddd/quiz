generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  password      String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  birthday      DateTime?
  accounts      Account[]
  activity      Activity[]
  folders       Folder[]
  sessions      Session[]
  studySets     StudySet[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Flashcard {
  id         String   @id @default(cuid())
  term       String
  definition String
  studySetId String
  position   Int
  studySet   StudySet @relation(fields: [studySetId], references: [id], onDelete: Cascade)
}

model StudySet {
  id          String      @id @default(cuid())
  title       String
  description String?
  userId      String
  folderId    String?
  cards       Flashcard[]
  folder      Folder?     @relation(fields: [folderId], references: [id])
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Folder {
  id          String     @id @default(cuid())
  title       String
  description String?
  userId      String
  slug        String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  studySets   StudySet[]
}

model Activity {
  id     String   @id @default(cuid())
  date   DateTime @default(now())
  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Example {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime
}
