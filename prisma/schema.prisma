generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String             @id @default(cuid())
  name              String?
  password          String?
  email             String?            @unique
  emailVerified     DateTime?
  image             String?
  birthday          DateTime?
  accounts          Account[]
  activity          Activity[]
  folders           Folder[]
  sessions          Session[]
  studySets         StudySet[]
  starredFlashcards StarredFlashcard[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Flashcard {
  id                String             @id @default(cuid())
  term              String
  definition        String
  studySetId        String
  position          Int
  studySet          StudySet           @relation(fields: [studySetId], references: [id], onDelete: Cascade)
  starredFlashcards StarredFlashcard[]
}

model StudySet {
  id          String      @id @default(cuid())
  title       String
  description String?
  userId      String
  cards       Flashcard[]
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  folders     Folder[]    @relation("FolderToStudySet")
  createdAt   DateTime    @default(now())
}

model StarredFlashcard {
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  flashcardId String
  flashcard   Flashcard @relation(fields: [flashcardId], references: [id], onDelete: Cascade)

  @@id([flashcardId, userId])
}

model Folder {
  id          String     @id @default(cuid())
  title       String
  description String?
  userId      String
  slug        String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  studySets   StudySet[] @relation("FolderToStudySet")
}

model Activity {
  id     String   @id @default(cuid())
  date   DateTime @default(now())
  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
